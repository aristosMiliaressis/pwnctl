// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pwntainer.Persistence;

namespace Pwntainer.Persistence.Migrations
{
    [DbContext(typeof(PwntainerDbContext))]
    [Migration("20210916131231_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("Pwntainer.Application.Entities.ARecord", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DomainId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("HostId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TasksRun")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ARecords");
                });

            modelBuilder.Entity("Pwntainer.Application.Entities.Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("InScope")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("TasksRun")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("Pwntainer.Application.Entities.Endpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TasksRun")
                        .HasColumnType("TEXT");

                    b.Property<string>("Uri")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Endpoints");
                });

            modelBuilder.Entity("Pwntainer.Application.Entities.EndpointTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndpointId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("TasksRun")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EndpointId");

                    b.ToTable("EndpointTags");
                });

            modelBuilder.Entity("Pwntainer.Application.Entities.Host", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IP")
                        .HasColumnType("TEXT");

                    b.Property<string>("TasksRun")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("Pwntainer.Application.Entities.NetRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CIDR")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("TasksRun")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NetRanges");
                });

            modelBuilder.Entity("Pwntainer.Application.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IP")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Protocol")
                        .HasColumnType("TEXT");

                    b.Property<string>("TasksRun")
                        .HasColumnType("TEXT");

                    b.Property<int>("TransportProtocol")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Pwntainer.Application.Entities.ServiceTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceTagId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TasksRun")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServiceTags");
                });

            modelBuilder.Entity("Pwntainer.Application.Entities.VirtualHost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TasksRun")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("VirtualHosts");
                });

            modelBuilder.Entity("Pwntainer.Application.Entities.WildcardDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pattern")
                        .HasColumnType("TEXT");

                    b.Property<string>("TasksRun")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WildcardDomains");
                });

            modelBuilder.Entity("Pwntainer.Application.Entities.ARecord", b =>
                {
                    b.HasOne("Pwntainer.Application.Entities.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pwntainer.Application.Entities.Host", "Host")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("Pwntainer.Application.Entities.Endpoint", b =>
                {
                    b.HasOne("Pwntainer.Application.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Pwntainer.Application.Entities.EndpointTag", b =>
                {
                    b.HasOne("Pwntainer.Application.Entities.Endpoint", "Endpoint")
                        .WithMany()
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Pwntainer.Application.ValueObject.Tag", "Tag", b1 =>
                        {
                            b1.Property<int>("EndpointTagId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Subject")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Type")
                                .HasColumnType("TEXT");

                            b1.HasKey("EndpointTagId");

                            b1.ToTable("EndpointTags");

                            b1.WithOwner()
                                .HasForeignKey("EndpointTagId");
                        });

                    b.Navigation("Endpoint");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Pwntainer.Application.Entities.Host", b =>
                {
                    b.OwnsOne("Pwntainer.Application.ValueObject.OperatingSystem", "OperatingSystem", b1 =>
                        {
                            b1.Property<int>("HostId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Build")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Family")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Version")
                                .HasColumnType("TEXT");

                            b1.HasKey("HostId");

                            b1.ToTable("Hosts");

                            b1.WithOwner()
                                .HasForeignKey("HostId");
                        });

                    b.Navigation("OperatingSystem");
                });

            modelBuilder.Entity("Pwntainer.Application.Entities.ServiceTag", b =>
                {
                    b.OwnsOne("Pwntainer.Application.ValueObject.Tag", "Tag", b1 =>
                        {
                            b1.Property<int>("ServiceTagId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Subject")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Type")
                                .HasColumnType("TEXT");

                            b1.HasKey("ServiceTagId");

                            b1.ToTable("ServiceTags");

                            b1.WithOwner()
                                .HasForeignKey("ServiceTagId");
                        });

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Pwntainer.Application.Entities.VirtualHost", b =>
                {
                    b.HasOne("Pwntainer.Application.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });
#pragma warning restore 612, 618
        }
    }
}
