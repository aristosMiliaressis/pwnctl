version: '3'

tasks:
  simple-setup:
    deps: [install-deps, build-svc-image, push-svc-image, bootstrap-aws, deploy-app, install-cli, init-app]

  test:
    cmds:
      - dotnet test --filter "FullyQualifiedName~test.unit"

  test-svc:
    cmds:
      - |
        rm -rf test/pwnctl.svc.test.int/bin
        export ECR_REGISTRY_URI=$(aws ecr describe-repositories | jq -r '.repositories[] | select( .repositoryName == "pwnctl") | .repositoryUri')
        dotnet test --filter "FullyQualifiedName~pwnctl.svc"

  build-api:
    cmds:
      - dotnet build src/pwnctl.api/pwnctl.api.csproj -c Release

  build-cli:
    cmds:
      - dotnet publish src/pwnctl.cli/pwnctl.cli.csproj -c Release

  build-svc:
    cmds:
      - dotnet publish src/core/pwnctl.svc/pwnctl.svc.csproj -c Release

  build-svc-image:
    cmds:
      - |
        ecrUri=$(aws ecr describe-repositories | jq -r '.repositories[] | select( .repositoryName == "pwnctl") | .repositoryUri')
        docker build src/core/ -t ${ecrUri}:latest
        docker tag ${ecrUri}:latest ${ecrUri}:untested

  push-svc-image:
    cmds:
      - |
        region=$(aws configure get region)
        ecrUri=$(aws ecr describe-repositories | jq -r '.repositories[] | select( .repositoryName == "pwnctl") | .repositoryUri')
        aws ecr get-login-password --region $region \
          | docker login --username AWS --password-stdin $ecrUri
        docker push ${ecrUri}:latest

  build-all:
    deps: [build-cli, build-api, build-svc-image]

  install-cli:
    deps: [build-cli]
    cmds:
      - chmod +x src/pwnctl.cli/bin/Release/net7.0/linux-x64/publish/pwnctl
      - sudo mv src/pwnctl.cli/bin/Release/net7.0/linux-x64/publish/pwnctl /usr/local/bin
      - sudo mkdir -p /etc/pwnctl/
      - sudo chown $USER /etc/pwnctl/
      - sudo mv src/pwnctl.cli/bin/Release/net7.0/linux-x64/publish/config.ini /etc/pwnctl/
      - sudo ./src/core/pwnctl.svc/scripts/get-psl.sh /etc/pwnctl/
      - sudo cp -r ./src/core/pwnctl.infra/Persistence/seed /etc/pwnctl

  deploy-base:
    cmds:
      - gh variable set AWS_REGION --body "$(aws configure get region)"
      - gh variable set AWS_REGION --body "$(aws sts get-caller-identity)"
      - terraform -chdir=infra apply -target=module.base

  deploy-app:
    deps: [build-api, install-cli]
    cmds:
      - terraform -chdir=infra apply
      - ./bin/upload-conf.sh

  debug-svc:
    cmds:
      - |
        mkdir -p deployment/seed/
        cp ./src/core/pwnctl.infra/Persistence/seed/*.yml deployment/seed/
        ecrUri=$(aws ecr describe-repositories | jq -r '.repositories[] | select( .repositoryName == "pwnctl") | .repositoryUri')
        docker run -e PWNCTL_USE_SQLITE=true -e PWNCTL_TEST_RUN=true -e PWNCTL_INSTALL_PATH=/mnt/efs \
                   -e PWNCTL_Logging__FilePath=/mnt/efs -e PWNCTL_Logging__MinLevel=Information \
                   -v "$(pwd)"/deployment:/mnt/efs -t ${ecrUri}:latest

  get-logs:
    cmds:
      - awslogs get -s 600m -G --timestamp /aws/ecs/worker

  get-api-logs:
    cmds:
      - |
        functionName=$(aws lambda list-functions | jq -r '.Functions[] | select( .FunctionName | startswith("pwnctl_api_") ) | .FunctionName')
        awslogs get -s 1440m -G --timestamp /aws/lambda/$functionName

  destroy:
    cmds:
      - ./bin/teardown.sh

  install-deps:
    cmds:
      - ./bin/install-deps.sh
