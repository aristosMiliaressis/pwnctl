version: '3'

tasks:
  test:
    deps: [test-unit, test-int]

  test-unit:
    cmds:
      - dotnet test --filter "FullyQualifiedName~test.unit"

  test-int:
    deps: [build-exec-short-image, build-exec-long-image, build-proc-image]
    cmds:
      - |
        . ./bin/setenv.sh
        dotnet test --filter "FullyQualifiedName~test.int"
        docker-compose -f test/pwnctl.core.test.int/docker-compose.ecs-local.yml down

  build-api:
    cmds:
      - dotnet clean src/pwnctl.api/pwnctl.api.csproj
      - dotnet build src/pwnctl.api/pwnctl.api.csproj -c Release

  build-cli:
    cmds:
      - dotnet publish src/pwnctl.cli/pwnctl.cli.csproj -c Release

  build-exec-short-image:
    cmds:
      - |
        ecrUri=$(aws ecr describe-repositories | jq -r '.repositories[] | select( .repositoryName == "pwnctl-exec-short") | .repositoryUri')
        docker build --ssh default=$SSH_AUTH_SOCK src/core/ -f src/core/pwnctl.exec/shortlived/Dockerfile -t ${ecrUri}:latest

  build-exec-long-image:
    cmds:
      - |
        ecrUri=$(aws ecr describe-repositories | jq -r '.repositories[] | select( .repositoryName == "pwnctl-exec-long") | .repositoryUri')
        docker build --ssh default=$SSH_AUTH_SOCK src/core/ -f src/core/pwnctl.exec/longlived/Dockerfile -t ${ecrUri}:latest

  build-proc-image:
    cmds:
      - |
        ecrUri=$(aws ecr describe-repositories | jq -r '.repositories[] | select( .repositoryName == "pwnctl-proc") | .repositoryUri')
        docker build src/core/ -f src/core/pwnctl.proc/Dockerfile -t ${ecrUri}:latest

  build-all:
    deps: [build-cli, build-api, build-exec-short-image, build-exec-long-image, build-proc-image]

  install-cli:
    deps: [build-cli]
    cmds:
      - chmod +x src/pwnctl.cli/bin/Release/net7.0/linux-x64/publish/pwnctl
      - mv src/pwnctl.cli/bin/Release/net7.0/linux-x64/publish/pwnctl ~/.local/bin
      - mkdir -p ~/.config/pwnctl/
      - chown `whoami` ~/.config/pwnctl/
      - mv src/pwnctl.cli/bin/Release/net7.0/linux-x64/publish/config.ini ~/.config/pwnctl/

  setup-ci:
    cmds:
      #- ./bin/setup-gha-secrets.sh
      - terraform -chdir=infra/modules/ci apply -auto-approve

  deploy:
    deps: [build-api, setup-ci]
    cmds:
      - ./bin/deploy.sh
      
  deploy2vps:
    deps: [build-api, setup-ci]
    cmds:
      - ./bin/deploy_vps.sh

  destroy:
    cmds:
      - ./bin/teardown.sh

  destroy-ci:
    cmds:
      - terraform -chdir=infra/modules/ci destroy

  debug:
    deps: [build-exec-short-image, build-exec-long-image, build-proc-image]
    cmds:
      - | 
        . ./bin/setenv.sh
        docker-compose -f test/pwnctl.core.test.int/docker-compose.ecs-local.yml up

  get-exec-logs:
    cmds:
      - awslogs get -s 1440m -G --timestamp /aws/ecs/exec

  get-proc-logs:
    cmds:
      - awslogs get -s 1440m -G --timestamp /aws/ecs/proc

  get-api-logs:
    cmds:
      - |
        functionName=$(aws lambda list-functions | jq -r '.Functions[] | select( .FunctionName | startswith("pwnctl_api") ) | .FunctionName')
        awslogs get -s 1440m -G --timestamp /aws/lambda/$functionName

  clean:
    cmds:
      - find {src,test} -type d -name bin -exec rm -rf {} +
      - find {src,test} -type d -name obj -exec rm -rf {} +

  deploy-jumpbox:
    cmds: 
      - terraform -chdir=infra/modules/jumpbox init
      - terraform -chdir=infra/modules/jumpbox apply -auto-approve

  destroy-jumpbox:
    cmds: 
      - terraform -chdir=infra/modules/jumpbox destroy -auto-approve