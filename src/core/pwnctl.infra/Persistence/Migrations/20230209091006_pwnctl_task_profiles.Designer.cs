// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using pwnctl.infra.Persistence;

#nullable disable

namespace pwnctl.infra.Migrations
{
    [DbContext(typeof(PwnctlDbContext))]
    [Migration("20230209091006_pwnctl_task_profiles")]
    partial class pwnctl_task_profiles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("pwnctl.app.Assets.Aggregates.AssetRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DomainNameId")
                        .HasColumnType("text");

                    b.Property<string>("DomainNameRecordId")
                        .HasColumnType("text");

                    b.Property<string>("EmailId")
                        .HasColumnType("text");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FoundByTaskId")
                        .HasColumnType("integer");

                    b.Property<string>("HttpEndpointId")
                        .HasColumnType("text");

                    b.Property<string>("HttpHostId")
                        .HasColumnType("text");

                    b.Property<string>("HttpParameterId")
                        .HasColumnType("text");

                    b.Property<bool>("InScope")
                        .HasColumnType("boolean");

                    b.Property<string>("NetworkHostId")
                        .HasColumnType("text");

                    b.Property<string>("NetworkRangeId")
                        .HasColumnType("text");

                    b.Property<string>("NetworkSocketId")
                        .HasColumnType("text");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DomainNameId");

                    b.HasIndex("DomainNameRecordId");

                    b.HasIndex("EmailId");

                    b.HasIndex("FoundByTaskId");

                    b.HasIndex("HttpEndpointId");

                    b.HasIndex("HttpHostId");

                    b.HasIndex("HttpParameterId");

                    b.HasIndex("NetworkHostId");

                    b.HasIndex("NetworkRangeId");

                    b.HasIndex("NetworkSocketId");

                    b.HasIndex("ProgramId");

                    b.ToTable("AssetRecords");
                });

            modelBuilder.Entity("pwnctl.app.Notifications.Entities.NotificationRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CheckOutOfScope")
                        .HasColumnType("boolean");

                    b.Property<string>("Filter")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<string>("Template")
                        .HasColumnType("text");

                    b.Property<int>("Topic")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("NotificationRules");
                });

            modelBuilder.Entity("pwnctl.app.Scope.Entities.OperationalPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Blacklist")
                        .HasColumnType("text");

                    b.Property<long?>("MaxAggressiveness")
                        .HasColumnType("bigint");

                    b.Property<string>("Whitelist")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OperationalPolicies");
                });

            modelBuilder.Entity("pwnctl.app.Scope.Entities.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Platform")
                        .HasColumnType("text");

                    b.Property<int?>("PolicyId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskProfileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PolicyId")
                        .IsUnique();

                    b.HasIndex("TaskProfileId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("pwnctl.app.Scope.Entities.ScopeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Pattern")
                        .HasColumnType("text");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("ScopeDefinitions");
                });

            modelBuilder.Entity("pwnctl.app.Tagging.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssetRecordId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetRecordId");

                    b.HasIndex("RecordId", "Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("pwnctl.app.Tasks.Entities.TaskDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Aggressiveness")
                        .HasColumnType("integer");

                    b.Property<string>("CommandTemplate")
                        .HasColumnType("text");

                    b.Property<string>("Filter")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("MatchOutOfScope")
                        .HasColumnType("boolean");

                    b.Property<int>("ProfileId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("TaskDefinitions");
                });

            modelBuilder.Entity("pwnctl.app.Tasks.Entities.TaskEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssetRecordId")
                        .HasColumnType("text");

                    b.Property<int>("DefinitionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ExitCode")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("QueuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RecordId")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssetRecordId");

                    b.HasIndex("DefinitionId");

                    b.HasIndex("RecordId");

                    b.ToTable("TaskEntries");
                });

            modelBuilder.Entity("pwnctl.app.Tasks.Entities.TaskProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TaskProfiles");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.DomainName", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ParentDomainId")
                        .HasColumnType("text");

                    b.Property<int>("ZoneDepth")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentDomainId");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.DomainNameRecord", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DomainId")
                        .HasColumnType("text");

                    b.Property<string>("HostId")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("HostId");

                    b.HasIndex("Type", "Key", "Value")
                        .IsUnique();

                    b.ToTable("DNSRecords");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.Email", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("DomainId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("DomainId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.HttpEndpoint", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ParentEndpointId")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("Scheme")
                        .HasColumnType("text");

                    b.Property<string>("SocketAddressId")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentEndpointId");

                    b.HasIndex("SocketAddressId");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("HttpEndpoints");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.HttpHost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ServiceId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("HttpHosts");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.HttpParameter", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("EndpointId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<string>("UrlEncodedCsValues")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EndpointId");

                    b.HasIndex("Url", "Name", "Type")
                        .IsUnique();

                    b.ToTable("HttpParameters");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.NetworkHost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("IP")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IP")
                        .IsUnique();

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.NetworkRange", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FirstAddress")
                        .HasColumnType("text");

                    b.Property<int>("NetPrefixBits")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FirstAddress", "NetPrefixBits")
                        .IsUnique();

                    b.ToTable("NetworkRanges");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.NetworkSocket", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("DomainNameId")
                        .HasColumnType("text");

                    b.Property<string>("NetworkHostId")
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<int>("TransportProtocol")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("DomainNameId");

                    b.HasIndex("NetworkHostId");

                    b.ToTable("Sockets");
                });

            modelBuilder.Entity("pwnctl.app.Assets.Aggregates.AssetRecord", b =>
                {
                    b.HasOne("pwnctl.domain.Entities.DomainName", "DomainName")
                        .WithMany()
                        .HasForeignKey("DomainNameId");

                    b.HasOne("pwnctl.domain.Entities.DomainNameRecord", "DomainNameRecord")
                        .WithMany()
                        .HasForeignKey("DomainNameRecordId");

                    b.HasOne("pwnctl.domain.Entities.Email", "Email")
                        .WithMany()
                        .HasForeignKey("EmailId");

                    b.HasOne("pwnctl.app.Tasks.Entities.TaskEntry", "FoundByTask")
                        .WithMany()
                        .HasForeignKey("FoundByTaskId");

                    b.HasOne("pwnctl.domain.Entities.HttpEndpoint", "HttpEndpoint")
                        .WithMany()
                        .HasForeignKey("HttpEndpointId");

                    b.HasOne("pwnctl.domain.Entities.HttpHost", "HttpHost")
                        .WithMany()
                        .HasForeignKey("HttpHostId");

                    b.HasOne("pwnctl.domain.Entities.HttpParameter", "HttpParameter")
                        .WithMany()
                        .HasForeignKey("HttpParameterId");

                    b.HasOne("pwnctl.domain.Entities.NetworkHost", "NetworkHost")
                        .WithMany()
                        .HasForeignKey("NetworkHostId");

                    b.HasOne("pwnctl.domain.Entities.NetworkRange", "NetworkRange")
                        .WithMany()
                        .HasForeignKey("NetworkRangeId");

                    b.HasOne("pwnctl.domain.Entities.NetworkSocket", "NetworkSocket")
                        .WithMany()
                        .HasForeignKey("NetworkSocketId");

                    b.HasOne("pwnctl.app.Scope.Entities.Program", "Program")
                        .WithMany("Assets")
                        .HasForeignKey("ProgramId");

                    b.OwnsOne("pwnctl.domain.ValueObjects.AssetClass", "SubjectClass", b1 =>
                        {
                            b1.Property<string>("AssetRecordId")
                                .HasColumnType("text");

                            b1.Property<string>("Class")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AssetRecordId");

                            b1.ToTable("AssetRecords");

                            b1.WithOwner()
                                .HasForeignKey("AssetRecordId");
                        });

                    b.Navigation("DomainName");

                    b.Navigation("DomainNameRecord");

                    b.Navigation("Email");

                    b.Navigation("FoundByTask");

                    b.Navigation("HttpEndpoint");

                    b.Navigation("HttpHost");

                    b.Navigation("HttpParameter");

                    b.Navigation("NetworkHost");

                    b.Navigation("NetworkRange");

                    b.Navigation("NetworkSocket");

                    b.Navigation("Program");

                    b.Navigation("SubjectClass");
                });

            modelBuilder.Entity("pwnctl.app.Notifications.Entities.NotificationRule", b =>
                {
                    b.OwnsOne("pwnctl.domain.ValueObjects.AssetClass", "SubjectClass", b1 =>
                        {
                            b1.Property<int>("NotificationRuleId")
                                .HasColumnType("integer");

                            b1.Property<string>("Class")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("NotificationRuleId");

                            b1.ToTable("NotificationRules");

                            b1.WithOwner()
                                .HasForeignKey("NotificationRuleId");
                        });

                    b.Navigation("SubjectClass");
                });

            modelBuilder.Entity("pwnctl.app.Scope.Entities.Program", b =>
                {
                    b.HasOne("pwnctl.app.Scope.Entities.OperationalPolicy", "Policy")
                        .WithOne()
                        .HasForeignKey("pwnctl.app.Scope.Entities.Program", "PolicyId");

                    b.HasOne("pwnctl.app.Tasks.Entities.TaskProfile", "TaskProfile")
                        .WithMany()
                        .HasForeignKey("TaskProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");

                    b.Navigation("TaskProfile");
                });

            modelBuilder.Entity("pwnctl.app.Scope.Entities.ScopeDefinition", b =>
                {
                    b.HasOne("pwnctl.app.Scope.Entities.Program", "Program")
                        .WithMany("Scope")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Program");
                });

            modelBuilder.Entity("pwnctl.app.Tagging.Entities.Tag", b =>
                {
                    b.HasOne("pwnctl.app.Assets.Aggregates.AssetRecord", null)
                        .WithMany("Tags")
                        .HasForeignKey("AssetRecordId");

                    b.HasOne("pwnctl.app.Assets.Aggregates.AssetRecord", "Record")
                        .WithMany()
                        .HasForeignKey("RecordId");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("pwnctl.app.Tasks.Entities.TaskDefinition", b =>
                {
                    b.HasOne("pwnctl.app.Tasks.Entities.TaskProfile", "Profile")
                        .WithMany("TaskDefinitions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("pwnctl.domain.ValueObjects.AssetClass", "SubjectClass", b1 =>
                        {
                            b1.Property<int>("TaskDefinitionId")
                                .HasColumnType("integer");

                            b1.Property<string>("Class")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TaskDefinitionId");

                            b1.ToTable("TaskDefinitions");

                            b1.WithOwner()
                                .HasForeignKey("TaskDefinitionId");
                        });

                    b.Navigation("Profile");

                    b.Navigation("SubjectClass");
                });

            modelBuilder.Entity("pwnctl.app.Tasks.Entities.TaskEntry", b =>
                {
                    b.HasOne("pwnctl.app.Assets.Aggregates.AssetRecord", null)
                        .WithMany("Tasks")
                        .HasForeignKey("AssetRecordId");

                    b.HasOne("pwnctl.app.Tasks.Entities.TaskDefinition", "Definition")
                        .WithMany()
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pwnctl.app.Assets.Aggregates.AssetRecord", "Record")
                        .WithMany()
                        .HasForeignKey("RecordId");

                    b.Navigation("Definition");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.DomainName", b =>
                {
                    b.HasOne("pwnctl.domain.Entities.DomainName", "ParentDomain")
                        .WithMany()
                        .HasForeignKey("ParentDomainId");

                    b.Navigation("ParentDomain");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.DomainNameRecord", b =>
                {
                    b.HasOne("pwnctl.domain.Entities.DomainName", "DomainName")
                        .WithMany("DNSRecords")
                        .HasForeignKey("DomainId");

                    b.HasOne("pwnctl.domain.Entities.NetworkHost", "NetworkHost")
                        .WithMany("AARecords")
                        .HasForeignKey("HostId");

                    b.Navigation("DomainName");

                    b.Navigation("NetworkHost");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.Email", b =>
                {
                    b.HasOne("pwnctl.domain.Entities.DomainName", "DomainName")
                        .WithMany()
                        .HasForeignKey("DomainId");

                    b.Navigation("DomainName");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.HttpEndpoint", b =>
                {
                    b.HasOne("pwnctl.domain.Entities.HttpEndpoint", "ParentEndpoint")
                        .WithMany()
                        .HasForeignKey("ParentEndpointId");

                    b.HasOne("pwnctl.domain.Entities.NetworkSocket", "Socket")
                        .WithMany("Endpoints")
                        .HasForeignKey("SocketAddressId");

                    b.Navigation("ParentEndpoint");

                    b.Navigation("Socket");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.HttpHost", b =>
                {
                    b.HasOne("pwnctl.domain.Entities.NetworkSocket", "Socket")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("Socket");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.HttpParameter", b =>
                {
                    b.HasOne("pwnctl.domain.Entities.HttpEndpoint", "Endpoint")
                        .WithMany("HttpParameters")
                        .HasForeignKey("EndpointId");

                    b.Navigation("Endpoint");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.NetworkSocket", b =>
                {
                    b.HasOne("pwnctl.domain.Entities.DomainName", "DomainName")
                        .WithMany("Sockets")
                        .HasForeignKey("DomainNameId");

                    b.HasOne("pwnctl.domain.Entities.NetworkHost", "NetworkHost")
                        .WithMany("Sockets")
                        .HasForeignKey("NetworkHostId");

                    b.Navigation("DomainName");

                    b.Navigation("NetworkHost");
                });

            modelBuilder.Entity("pwnctl.app.Assets.Aggregates.AssetRecord", b =>
                {
                    b.Navigation("Tags");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("pwnctl.app.Scope.Entities.Program", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("pwnctl.app.Tasks.Entities.TaskProfile", b =>
                {
                    b.Navigation("TaskDefinitions");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.DomainName", b =>
                {
                    b.Navigation("DNSRecords");

                    b.Navigation("Sockets");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.HttpEndpoint", b =>
                {
                    b.Navigation("HttpParameters");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.NetworkHost", b =>
                {
                    b.Navigation("AARecords");

                    b.Navigation("Sockets");
                });

            modelBuilder.Entity("pwnctl.domain.Entities.NetworkSocket", b =>
                {
                    b.Navigation("Endpoints");
                });
#pragma warning restore 612, 618
        }
    }
}
