Profiles: [ "basic", "all" ]

TaskDefinitions:
  - Name: domain_resolution
    CommandTemplate: resolve.sh {{Name}}
    Subject: DomainName
    MonitorRules:
      Schedule: 0 0 * * *
      PreCondition: Tags["rcode"] != "NOERROR"
      PostCondition: newTags["rcode"] != oldTags["rcode"]
      NotificationTemplate: domain {{Name}} changed rcode from {{oldTags["rcode"]}} to {{newTags["rcode"]}}

  - Name: httpx
    CommandTemplate: echo {{Name}} | httpx -silent
    Subject: DomainName

  - Name: sub_enum
    CommandTemplate: sub-enum.sh {{Name}} {{ZoneDepth}}
    Filter: DomainName.ZoneDepth <= 2
    Subject: DomainName

  - Name: dns_record_enum
    CommandTemplate: dns-record-enum.sh {{Name}}
    Subject: DomainName

  - Name: get_all_urls
    CommandTemplate: get-all-urls.sh {{Name}}
    Subject: DomainName
    Filter: DomainName.ZoneDepth == 1

  - Name: waybackurls
    CommandTemplate: waybackurls.sh {{Name}}
    Subject: DomainName
    Filter: DomainName.ZoneDepth == 1

  - Name: reverse_whois
    CommandTemplate: reverse-whois.sh {{Address}}
    Subject: Email
    MatchOutOfScope: true

  - Name: zone_trasfer
    CommandTemplate: zone-transfer.sh {{Name}}
    Subject: DomainName

  - Name: zone_walking
    CommandTemplate: ldns-walk {{Key}} | tail -n +2 | cut -d ' ' -f 1
    Filter: DomainNameRecord.Type == pwnctl.domain.Enums.DnsRecordType.NSEC
    Subject: DomainNameRecord

  - Name: cname_takeover_check
    CommandTemplate: cloud_misconfig_scan.sh {{Value}}
    Subject: DomainNameRecord
    Filter: DomainNameRecord.Type == pwnctl.domain.Enums.DnsRecordType.CNAME
    MonitorRules:
      Schedule: 0 0 * * *

  - Name: s3_scan
    CommandTemplate: s3-scan.sh {{Name}}
    Subject: DomainName
    Filter: DomainName.Name.Contains("amazonaws.com") && DomainName.Name.Contains("s3")
    MatchOutOfScope: true
