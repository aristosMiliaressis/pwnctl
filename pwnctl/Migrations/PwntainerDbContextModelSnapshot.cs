// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pwnctl.Persistence;

namespace pwnctl.Migrations
{
    [DbContext(typeof(PwntainerDbContext))]
    partial class PwntainerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("pwnctl.Entities.DNSRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DomainId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DomainId1")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HostId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HostId1")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("InScope")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("DomainId1");

                    b.HasIndex("HostId");

                    b.HasIndex("HostId1");

                    b.ToTable("DNSRecords");
                });

            modelBuilder.Entity("pwnctl.Entities.Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("InScope")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRegistrationDomain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RegistrationDomainId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationDomainId");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("pwnctl.Entities.Endpoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("InScope")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scheme")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Uri")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Endpoints");
                });

            modelBuilder.Entity("pwnctl.Entities.EndpointTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndpointId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("InScope")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EndpointId");

                    b.ToTable("EndpointTags");
                });

            modelBuilder.Entity("pwnctl.Entities.Host", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("IP")
                        .HasColumnType("TEXT");

                    b.Property<bool>("InScope")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Hosts");
                });

            modelBuilder.Entity("pwnctl.Entities.NetRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstAddress")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("InScope")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("NetPrefixBits")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("NetRanges");
                });

            modelBuilder.Entity("pwnctl.Entities.Program", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Platform")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("pwnctl.Entities.ScopeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pattern")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProgramId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProgramId");

                    b.ToTable("ScopeDefinitions");
                });

            modelBuilder.Entity("pwnctl.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationProtocol")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DomainId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("HostId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("InScope")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransportProtocol")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("HostId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("pwnctl.Entities.ServiceTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("InScope")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceTagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ServiceTags");
                });

            modelBuilder.Entity("pwnctl.Entities.VirtualHost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoundAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("InScope")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("VirtualHosts");
                });

            modelBuilder.Entity("pwnctl.Entities.DNSRecord", b =>
                {
                    b.HasOne("pwnctl.Entities.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId");

                    b.HasOne("pwnctl.Entities.Domain", null)
                        .WithMany("DNSRecords")
                        .HasForeignKey("DomainId1");

                    b.HasOne("pwnctl.Entities.Host", "Host")
                        .WithMany()
                        .HasForeignKey("HostId");

                    b.HasOne("pwnctl.Entities.Host", null)
                        .WithMany("AARecords")
                        .HasForeignKey("HostId1");

                    b.Navigation("Domain");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("pwnctl.Entities.Domain", b =>
                {
                    b.HasOne("pwnctl.Entities.Domain", "RegistrationDomain")
                        .WithMany()
                        .HasForeignKey("RegistrationDomainId");

                    b.Navigation("RegistrationDomain");
                });

            modelBuilder.Entity("pwnctl.Entities.Endpoint", b =>
                {
                    b.HasOne("pwnctl.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("pwnctl.Entities.EndpointTag", b =>
                {
                    b.HasOne("pwnctl.Entities.Endpoint", "Endpoint")
                        .WithMany()
                        .HasForeignKey("EndpointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("pwnctl.ValueObject.Tag", "Tag", b1 =>
                        {
                            b1.Property<int>("EndpointTagId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Subject")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Type")
                                .HasColumnType("TEXT");

                            b1.HasKey("EndpointTagId");

                            b1.ToTable("EndpointTags");

                            b1.WithOwner()
                                .HasForeignKey("EndpointTagId");
                        });

                    b.Navigation("Endpoint");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("pwnctl.Entities.Host", b =>
                {
                    b.OwnsOne("pwnctl.ValueObject.OperatingSystem", "OperatingSystem", b1 =>
                        {
                            b1.Property<int>("HostId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Build")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Family")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Version")
                                .HasColumnType("TEXT");

                            b1.HasKey("HostId");

                            b1.ToTable("Hosts");

                            b1.WithOwner()
                                .HasForeignKey("HostId");
                        });

                    b.Navigation("OperatingSystem");
                });

            modelBuilder.Entity("pwnctl.Entities.ScopeDefinition", b =>
                {
                    b.HasOne("pwnctl.Entities.Program", "Program")
                        .WithMany("Scope")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Program");
                });

            modelBuilder.Entity("pwnctl.Entities.Service", b =>
                {
                    b.HasOne("pwnctl.Entities.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId");

                    b.HasOne("pwnctl.Entities.Host", "Host")
                        .WithMany()
                        .HasForeignKey("HostId");

                    b.Navigation("Domain");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("pwnctl.Entities.ServiceTag", b =>
                {
                    b.OwnsOne("pwnctl.ValueObject.Tag", "Tag", b1 =>
                        {
                            b1.Property<int>("ServiceTagId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Subject")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Type")
                                .HasColumnType("TEXT");

                            b1.HasKey("ServiceTagId");

                            b1.ToTable("ServiceTags");

                            b1.WithOwner()
                                .HasForeignKey("ServiceTagId");
                        });

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("pwnctl.Entities.VirtualHost", b =>
                {
                    b.HasOne("pwnctl.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("pwnctl.Entities.Domain", b =>
                {
                    b.Navigation("DNSRecords");
                });

            modelBuilder.Entity("pwnctl.Entities.Host", b =>
                {
                    b.Navigation("AARecords");
                });

            modelBuilder.Entity("pwnctl.Entities.Program", b =>
                {
                    b.Navigation("Scope");
                });
#pragma warning restore 612, 618
        }
    }
}
