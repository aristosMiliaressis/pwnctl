name: ci

on:
  push:
    branches:
      - '**'
  pull_request:

  workflow_dispatch:

permissions:
      id-token: write
      contents: read

jobs:
  unit-test:
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:7.0
    steps:
      - name: Checkout subject branch
        uses: actions/checkout@v3

      - name: Cache Nuget packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: nuget

      - name: Run Unit Tests
        run: dotnet test --filter "FullyQualifiedName~test.unit"

  build-cli:
    needs: unit-test
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:7.0
    steps:
      - name: Checkout subject branch
        uses: actions/checkout@v3

      - name: Cache Nuget packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: nuget

      - name: build cli
        run: dotnet publish "src/pwnctl.cli/pwnctl.cli.csproj" -c Release -o ./pwnctl

  build-api:
    needs: unit-test
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:6.0
    steps:
      - name: Checkout subject branch
        uses: actions/checkout@v3

      - name: Cache Nuget packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: nuget

      - name: build api
        run: dotnet build src/pwnctl.api/pwnctl.api.csproj

  build-images:
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout subject branch
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_CALLER_IDENTITY }}:role/GitHubAction-AssumeRoleWithAction
          aws-region:  ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Build exec image
        uses: docker/build-push-action@v4
        with:
          tags: ${{ steps.login-ecr.outputs.registry }}/pwnctl-exec:untested
          push: true
          context: src/core/
          file: src/core/pwnctl.exec/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build proc image
        uses: docker/build-push-action@v4
        with:
          tags: ${{ steps.login-ecr.outputs.registry }}/pwnctl-proc:untested
          push: true
          context: src/core/
          file: src/core/pwnctl.proc/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-proc-img:
    needs: build-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout subject branch
        uses: actions/checkout@v3

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Cache Nuget packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: nuget

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_CALLER_IDENTITY }}:role/GitHubAction-AssumeRoleWithAction
          aws-region:  ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Test proc image
        run: |
          export ECR_REGISTRY_URI=${{ vars.AWS_CALLER_IDENTITY }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/pwnctl-proc
          dotnet test --filter "FullyQualifiedName~pwnctl.proc"

  push-images:
    needs: test-proc-img
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ vars.AWS_CALLER_IDENTITY }}:role/GitHubAction-AssumeRoleWithAction
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
          
      - name: Pull untested proc image
        run: docker pull ${{ steps.login-ecr.outputs.registry }}/pwnctl-proc:untested

      - name: Retag proc image from untested to latest
        run: docker buildx imagetools create -t ${{ steps.login-ecr.outputs.registry }}/pwnctl-proc:latest ${{ steps.login-ecr.outputs.registry }}/pwnctl-proc:untested

      - name: Pull untested exec image
        run: docker pull ${{ steps.login-ecr.outputs.registry }}/pwnctl-exec:untested

      - name: Retag exec image from untested to latest
        run: docker buildx imagetools create -t ${{ steps.login-ecr.outputs.registry }}/pwnctl-exec:latest ${{ steps.login-ecr.outputs.registry }}/pwnctl-exec:untested
